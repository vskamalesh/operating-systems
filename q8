#include <stdio.h>

struct Process {
    int id, burstTime, remainingTime;
};
void roundRobin(struct Process processes[], int n, int quantum) {
    int time = 0, completed = 0;
    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remainingTime > 0) {
                int execTime = (processes[i].remainingTime < quantum) ? processes[i].remainingTime : quantum;
                processes[i].remainingTime -= execTime;
                time += execTime;
                printf("Process %d runs for %d units.\n", processes[i].id, execTime);
                if (processes[i].remainingTime == 0) {
                    completed++;
                    printf("Process %d has completed.\n", processes[i].id);
                }
            }
        }
    }
}
int main() {
    int n, quantum;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    struct Process processes[n];
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter burst time for process %d: ", processes[i].id);
        scanf("%d", &processes[i].burstTime);
        processes[i].remainingTime = processes[i].burstTime;
    }
    printf("Enter time quantum: ");
    scanf("%d", &quantum);
    printf("\nRound Robin Scheduling:\n");
    roundRobin(processes, n, quantum);
    return 0;
}
